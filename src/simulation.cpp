// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "simulation.h"

// type_t
// 

const type_t::sigma_type& type_t::
sigma () const
{
  return this->sigma_.get ();
}

type_t::sigma_type& type_t::
sigma ()
{
  return this->sigma_.get ();
}

void type_t::
sigma (const sigma_type& x)
{
  this->sigma_.set (x);
}

type_t::sigma_type type_t::
sigma_default_value ()
{
  return sigma_type (0.0);
}

const type_t::epsilon_type& type_t::
epsilon () const
{
  return this->epsilon_.get ();
}

type_t::epsilon_type& type_t::
epsilon ()
{
  return this->epsilon_.get ();
}

void type_t::
epsilon (const epsilon_type& x)
{
  this->epsilon_.set (x);
}

type_t::epsilon_type type_t::
epsilon_default_value ()
{
  return epsilon_type (0.0);
}

const type_t::mass_type& type_t::
mass () const
{
  return this->mass_.get ();
}

type_t::mass_type& type_t::
mass ()
{
  return this->mass_.get ();
}

void type_t::
mass (const mass_type& x)
{
  this->mass_.set (x);
}

type_t::mass_type type_t::
mass_default_value ()
{
  return mass_type (0.0);
}


// vec3i_t
// 

const vec3i_t::X_type& vec3i_t::
X () const
{
  return this->X_.get ();
}

vec3i_t::X_type& vec3i_t::
X ()
{
  return this->X_.get ();
}

void vec3i_t::
X (const X_type& x)
{
  this->X_.set (x);
}

vec3i_t::X_type vec3i_t::
X_default_value ()
{
  return X_type (0);
}

const vec3i_t::Y_type& vec3i_t::
Y () const
{
  return this->Y_.get ();
}

vec3i_t::Y_type& vec3i_t::
Y ()
{
  return this->Y_.get ();
}

void vec3i_t::
Y (const Y_type& x)
{
  this->Y_.set (x);
}

vec3i_t::Y_type vec3i_t::
Y_default_value ()
{
  return Y_type (0);
}

const vec3i_t::Z_type& vec3i_t::
Z () const
{
  return this->Z_.get ();
}

vec3i_t::Z_type& vec3i_t::
Z ()
{
  return this->Z_.get ();
}

void vec3i_t::
Z (const Z_type& x)
{
  this->Z_.set (x);
}

vec3i_t::Z_type vec3i_t::
Z_default_value ()
{
  return Z_type (0);
}


// vec3d_t
// 

const vec3d_t::X_type& vec3d_t::
X () const
{
  return this->X_.get ();
}

vec3d_t::X_type& vec3d_t::
X ()
{
  return this->X_.get ();
}

void vec3d_t::
X (const X_type& x)
{
  this->X_.set (x);
}

vec3d_t::X_type vec3d_t::
X_default_value ()
{
  return X_type (0.0);
}

const vec3d_t::Y_type& vec3d_t::
Y () const
{
  return this->Y_.get ();
}

vec3d_t::Y_type& vec3d_t::
Y ()
{
  return this->Y_.get ();
}

void vec3d_t::
Y (const Y_type& x)
{
  this->Y_.set (x);
}

vec3d_t::Y_type vec3d_t::
Y_default_value ()
{
  return Y_type (0.0);
}

const vec3d_t::Z_type& vec3d_t::
Z () const
{
  return this->Z_.get ();
}

vec3d_t::Z_type& vec3d_t::
Z ()
{
  return this->Z_.get ();
}

void vec3d_t::
Z (const Z_type& x)
{
  this->Z_.set (x);
}

vec3d_t::Z_type vec3d_t::
Z_default_value ()
{
  return Z_type (0.0);
}


// vec3b_t
// 

const vec3b_t::X_type& vec3b_t::
X () const
{
  return this->X_.get ();
}

vec3b_t::X_type& vec3b_t::
X ()
{
  return this->X_.get ();
}

void vec3b_t::
X (const X_type& x)
{
  this->X_.set (x);
}

vec3b_t::X_type vec3b_t::
X_default_value ()
{
  return X_type (true);
}

const vec3b_t::Y_type& vec3b_t::
Y () const
{
  return this->Y_.get ();
}

vec3b_t::Y_type& vec3b_t::
Y ()
{
  return this->Y_.get ();
}

void vec3b_t::
Y (const Y_type& x)
{
  this->Y_.set (x);
}

vec3b_t::Y_type vec3b_t::
Y_default_value ()
{
  return Y_type (true);
}

const vec3b_t::Z_type& vec3b_t::
Z () const
{
  return this->Z_.get ();
}

vec3b_t::Z_type& vec3b_t::
Z ()
{
  return this->Z_.get ();
}

void vec3b_t::
Z (const Z_type& x)
{
  this->Z_.set (x);
}

vec3b_t::Z_type vec3b_t::
Z_default_value ()
{
  return Z_type (true);
}


// cuboid_t
// 

const cuboid_t::position_type& cuboid_t::
position () const
{
  return this->position_.get ();
}

cuboid_t::position_type& cuboid_t::
position ()
{
  return this->position_.get ();
}

void cuboid_t::
position (const position_type& x)
{
  this->position_.set (x);
}

void cuboid_t::
position (::std::auto_ptr< position_type > x)
{
  this->position_.set (x);
}

const cuboid_t::initialVelocity_type& cuboid_t::
initialVelocity () const
{
  return this->initialVelocity_.get ();
}

cuboid_t::initialVelocity_type& cuboid_t::
initialVelocity ()
{
  return this->initialVelocity_.get ();
}

void cuboid_t::
initialVelocity (const initialVelocity_type& x)
{
  this->initialVelocity_.set (x);
}

void cuboid_t::
initialVelocity (::std::auto_ptr< initialVelocity_type > x)
{
  this->initialVelocity_.set (x);
}

const cuboid_t::particleCount_type& cuboid_t::
particleCount () const
{
  return this->particleCount_.get ();
}

cuboid_t::particleCount_type& cuboid_t::
particleCount ()
{
  return this->particleCount_.get ();
}

void cuboid_t::
particleCount (const particleCount_type& x)
{
  this->particleCount_.set (x);
}

void cuboid_t::
particleCount (::std::auto_ptr< particleCount_type > x)
{
  this->particleCount_.set (x);
}

const cuboid_t::spacing_type& cuboid_t::
spacing () const
{
  return this->spacing_.get ();
}

cuboid_t::spacing_type& cuboid_t::
spacing ()
{
  return this->spacing_.get ();
}

void cuboid_t::
spacing (const spacing_type& x)
{
  this->spacing_.set (x);
}

const cuboid_t::type_type& cuboid_t::
type () const
{
  return this->type_.get ();
}

cuboid_t::type_type& cuboid_t::
type ()
{
  return this->type_.get ();
}

void cuboid_t::
type (const type_type& x)
{
  this->type_.set (x);
}

cuboid_t::type_type cuboid_t::
type_default_value ()
{
  return type_type (0);
}


// sphere_t
// 

const sphere_t::type_type& sphere_t::
type () const
{
  return this->type_.get ();
}

sphere_t::type_type& sphere_t::
type ()
{
  return this->type_.get ();
}

void sphere_t::
type (const type_type& x)
{
  this->type_.set (x);
}

const sphere_t::position_type& sphere_t::
position () const
{
  return this->position_.get ();
}

sphere_t::position_type& sphere_t::
position ()
{
  return this->position_.get ();
}

void sphere_t::
position (const position_type& x)
{
  this->position_.set (x);
}

void sphere_t::
position (::std::auto_ptr< position_type > x)
{
  this->position_.set (x);
}

const sphere_t::initialVelocity_type& sphere_t::
initialVelocity () const
{
  return this->initialVelocity_.get ();
}

sphere_t::initialVelocity_type& sphere_t::
initialVelocity ()
{
  return this->initialVelocity_.get ();
}

void sphere_t::
initialVelocity (const initialVelocity_type& x)
{
  this->initialVelocity_.set (x);
}

void sphere_t::
initialVelocity (::std::auto_ptr< initialVelocity_type > x)
{
  this->initialVelocity_.set (x);
}

const sphere_t::radius_type& sphere_t::
radius () const
{
  return this->radius_.get ();
}

sphere_t::radius_type& sphere_t::
radius ()
{
  return this->radius_.get ();
}

void sphere_t::
radius (const radius_type& x)
{
  this->radius_.set (x);
}

const sphere_t::spacing_type& sphere_t::
spacing () const
{
  return this->spacing_.get ();
}

sphere_t::spacing_type& sphere_t::
spacing ()
{
  return this->spacing_.get ();
}

void sphere_t::
spacing (const spacing_type& x)
{
  this->spacing_.set (x);
}


// particle_t
// 

const particle_t::position_type& particle_t::
position () const
{
  return this->position_.get ();
}

particle_t::position_type& particle_t::
position ()
{
  return this->position_.get ();
}

void particle_t::
position (const position_type& x)
{
  this->position_.set (x);
}

void particle_t::
position (::std::auto_ptr< position_type > x)
{
  this->position_.set (x);
}

const particle_t::velocity_type& particle_t::
velocity () const
{
  return this->velocity_.get ();
}

particle_t::velocity_type& particle_t::
velocity ()
{
  return this->velocity_.get ();
}

void particle_t::
velocity (const velocity_type& x)
{
  this->velocity_.set (x);
}

void particle_t::
velocity (::std::auto_ptr< velocity_type > x)
{
  this->velocity_.set (x);
}

const particle_t::type_optional& particle_t::
type () const
{
  return this->type_;
}

particle_t::type_optional& particle_t::
type ()
{
  return this->type_;
}

void particle_t::
type (const type_type& x)
{
  this->type_.set (x);
}

void particle_t::
type (const type_optional& x)
{
  this->type_ = x;
}


// particleArray_t
// 

const particleArray_t::particle_sequence& particleArray_t::
particle () const
{
  return this->particle_;
}

particleArray_t::particle_sequence& particleArray_t::
particle ()
{
  return this->particle_;
}

void particleArray_t::
particle (const particle_sequence& s)
{
  this->particle_ = s;
}


// thermostat_t
// 

const thermostat_t::numDimensions_type& thermostat_t::
numDimensions () const
{
  return this->numDimensions_.get ();
}

thermostat_t::numDimensions_type& thermostat_t::
numDimensions ()
{
  return this->numDimensions_.get ();
}

void thermostat_t::
numDimensions (const numDimensions_type& x)
{
  this->numDimensions_.set (x);
}

const thermostat_t::mask_optional& thermostat_t::
mask () const
{
  return this->mask_;
}

thermostat_t::mask_optional& thermostat_t::
mask ()
{
  return this->mask_;
}

void thermostat_t::
mask (const mask_type& x)
{
  this->mask_.set (x);
}

void thermostat_t::
mask (const mask_optional& x)
{
  this->mask_ = x;
}

void thermostat_t::
mask (::std::auto_ptr< mask_type > x)
{
  this->mask_.set (x);
}

const thermostat_t::initialTemp_type& thermostat_t::
initialTemp () const
{
  return this->initialTemp_.get ();
}

thermostat_t::initialTemp_type& thermostat_t::
initialTemp ()
{
  return this->initialTemp_.get ();
}

void thermostat_t::
initialTemp (const initialTemp_type& x)
{
  this->initialTemp_.set (x);
}

const thermostat_t::targetTemp_type& thermostat_t::
targetTemp () const
{
  return this->targetTemp_.get ();
}

thermostat_t::targetTemp_type& thermostat_t::
targetTemp ()
{
  return this->targetTemp_.get ();
}

void thermostat_t::
targetTemp (const targetTemp_type& x)
{
  this->targetTemp_.set (x);
}

const thermostat_t::step_type& thermostat_t::
step () const
{
  return this->step_.get ();
}

thermostat_t::step_type& thermostat_t::
step ()
{
  return this->step_.get ();
}

void thermostat_t::
step (const step_type& x)
{
  this->step_.set (x);
}

const thermostat_t::startTime_type& thermostat_t::
startTime () const
{
  return this->startTime_.get ();
}

thermostat_t::startTime_type& thermostat_t::
startTime ()
{
  return this->startTime_.get ();
}

void thermostat_t::
startTime (const startTime_type& x)
{
  this->startTime_.set (x);
}

const thermostat_t::targetTime_type& thermostat_t::
targetTime () const
{
  return this->targetTime_.get ();
}

thermostat_t::targetTime_type& thermostat_t::
targetTime ()
{
  return this->targetTime_.get ();
}

void thermostat_t::
targetTime (const targetTime_type& x)
{
  this->targetTime_.set (x);
}


// membrane_t
// 

const membrane_t::r0_type& membrane_t::
r0 () const
{
  return this->r0_.get ();
}

membrane_t::r0_type& membrane_t::
r0 ()
{
  return this->r0_.get ();
}

void membrane_t::
r0 (const r0_type& x)
{
  this->r0_.set (x);
}

const membrane_t::k_type& membrane_t::
k () const
{
  return this->k_.get ();
}

membrane_t::k_type& membrane_t::
k ()
{
  return this->k_.get ();
}

void membrane_t::
k (const k_type& x)
{
  this->k_.set (x);
}

const membrane_t::ljTruncation_type& membrane_t::
ljTruncation () const
{
  return this->ljTruncation_.get ();
}

membrane_t::ljTruncation_type& membrane_t::
ljTruncation ()
{
  return this->ljTruncation_.get ();
}

void membrane_t::
ljTruncation (const ljTruncation_type& x)
{
  this->ljTruncation_.set (x);
}

const membrane_t::pickIndex_type& membrane_t::
pickIndex () const
{
  return this->pickIndex_.get ();
}

membrane_t::pickIndex_type& membrane_t::
pickIndex ()
{
  return this->pickIndex_.get ();
}

void membrane_t::
pickIndex (const pickIndex_type& x)
{
  this->pickIndex_.set (x);
}

void membrane_t::
pickIndex (::std::auto_ptr< pickIndex_type > x)
{
  this->pickIndex_.set (x);
}

const membrane_t::pickSize_type& membrane_t::
pickSize () const
{
  return this->pickSize_.get ();
}

membrane_t::pickSize_type& membrane_t::
pickSize ()
{
  return this->pickSize_.get ();
}

void membrane_t::
pickSize (const pickSize_type& x)
{
  this->pickSize_.set (x);
}

void membrane_t::
pickSize (::std::auto_ptr< pickSize_type > x)
{
  this->pickSize_.set (x);
}

const membrane_t::pickForce_type& membrane_t::
pickForce () const
{
  return this->pickForce_.get ();
}

membrane_t::pickForce_type& membrane_t::
pickForce ()
{
  return this->pickForce_.get ();
}

void membrane_t::
pickForce (const pickForce_type& x)
{
  this->pickForce_.set (x);
}

void membrane_t::
pickForce (::std::auto_ptr< pickForce_type > x)
{
  this->pickForce_.set (x);
}

const membrane_t::pickDuration_type& membrane_t::
pickDuration () const
{
  return this->pickDuration_.get ();
}

membrane_t::pickDuration_type& membrane_t::
pickDuration ()
{
  return this->pickDuration_.get ();
}

void membrane_t::
pickDuration (const pickDuration_type& x)
{
  this->pickDuration_.set (x);
}


// simulation_t
// 

const simulation_t::thermostat_type& simulation_t::
thermostat () const
{
  return this->thermostat_.get ();
}

simulation_t::thermostat_type& simulation_t::
thermostat ()
{
  return this->thermostat_.get ();
}

void simulation_t::
thermostat (const thermostat_type& x)
{
  this->thermostat_.set (x);
}

void simulation_t::
thermostat (::std::auto_ptr< thermostat_type > x)
{
  this->thermostat_.set (x);
}

const simulation_t::gravity_type& simulation_t::
gravity () const
{
  return this->gravity_.get ();
}

simulation_t::gravity_type& simulation_t::
gravity ()
{
  return this->gravity_.get ();
}

void simulation_t::
gravity (const gravity_type& x)
{
  this->gravity_.set (x);
}

void simulation_t::
gravity (::std::auto_ptr< gravity_type > x)
{
  this->gravity_.set (x);
}

const simulation_t::domain_type& simulation_t::
domain () const
{
  return this->domain_.get ();
}

simulation_t::domain_type& simulation_t::
domain ()
{
  return this->domain_.get ();
}

void simulation_t::
domain (const domain_type& x)
{
  this->domain_.set (x);
}

void simulation_t::
domain (::std::auto_ptr< domain_type > x)
{
  this->domain_.set (x);
}

const simulation_t::boundaries_type& simulation_t::
boundaries () const
{
  return this->boundaries_.get ();
}

simulation_t::boundaries_type& simulation_t::
boundaries ()
{
  return this->boundaries_.get ();
}

void simulation_t::
boundaries (const boundaries_type& x)
{
  this->boundaries_.set (x);
}

void simulation_t::
boundaries (::std::auto_ptr< boundaries_type > x)
{
  this->boundaries_.set (x);
}

const simulation_t::wallType_type& simulation_t::
wallType () const
{
  return this->wallType_.get ();
}

simulation_t::wallType_type& simulation_t::
wallType ()
{
  return this->wallType_.get ();
}

void simulation_t::
wallType (const wallType_type& x)
{
  this->wallType_.set (x);
}

const simulation_t::rCutOff_type& simulation_t::
rCutOff () const
{
  return this->rCutOff_.get ();
}

simulation_t::rCutOff_type& simulation_t::
rCutOff ()
{
  return this->rCutOff_.get ();
}

void simulation_t::
rCutOff (const rCutOff_type& x)
{
  this->rCutOff_.set (x);
}

const simulation_t::smoothedLJRadius_optional& simulation_t::
smoothedLJRadius () const
{
  return this->smoothedLJRadius_;
}

simulation_t::smoothedLJRadius_optional& simulation_t::
smoothedLJRadius ()
{
  return this->smoothedLJRadius_;
}

void simulation_t::
smoothedLJRadius (const smoothedLJRadius_type& x)
{
  this->smoothedLJRadius_.set (x);
}

void simulation_t::
smoothedLJRadius (const smoothedLJRadius_optional& x)
{
  this->smoothedLJRadius_ = x;
}

const simulation_t::membrane_optional& simulation_t::
membrane () const
{
  return this->membrane_;
}

simulation_t::membrane_optional& simulation_t::
membrane ()
{
  return this->membrane_;
}

void simulation_t::
membrane (const membrane_type& x)
{
  this->membrane_.set (x);
}

void simulation_t::
membrane (const membrane_optional& x)
{
  this->membrane_ = x;
}

void simulation_t::
membrane (::std::auto_ptr< membrane_type > x)
{
  this->membrane_.set (x);
}

const simulation_t::type_sequence& simulation_t::
type () const
{
  return this->type_;
}

simulation_t::type_sequence& simulation_t::
type ()
{
  return this->type_;
}

void simulation_t::
type (const type_sequence& s)
{
  this->type_ = s;
}

const simulation_t::cuboid_sequence& simulation_t::
cuboid () const
{
  return this->cuboid_;
}

simulation_t::cuboid_sequence& simulation_t::
cuboid ()
{
  return this->cuboid_;
}

void simulation_t::
cuboid (const cuboid_sequence& s)
{
  this->cuboid_ = s;
}

const simulation_t::sphere_sequence& simulation_t::
sphere () const
{
  return this->sphere_;
}

simulation_t::sphere_sequence& simulation_t::
sphere ()
{
  return this->sphere_;
}

void simulation_t::
sphere (const sphere_sequence& s)
{
  this->sphere_ = s;
}

const simulation_t::particles_optional& simulation_t::
particles () const
{
  return this->particles_;
}

simulation_t::particles_optional& simulation_t::
particles ()
{
  return this->particles_;
}

void simulation_t::
particles (const particles_type& x)
{
  this->particles_.set (x);
}

void simulation_t::
particles (const particles_optional& x)
{
  this->particles_ = x;
}

void simulation_t::
particles (::std::auto_ptr< particles_type > x)
{
  this->particles_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// type_t
//

type_t::
type_t ()
: ::xml_schema::type (),
  sigma_ (sigma_default_value (), ::xml_schema::flags (), this),
  epsilon_ (epsilon_default_value (), ::xml_schema::flags (), this),
  mass_ (mass_default_value (), ::xml_schema::flags (), this)
{
}

type_t::
type_t (const type_t& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  sigma_ (x.sigma_, f, this),
  epsilon_ (x.epsilon_, f, this),
  mass_ (x.mass_, f, this)
{
}

type_t::
type_t (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  sigma_ (f, this),
  epsilon_ (f, this),
  mass_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
    this->parse (p, f);
  }
}

void type_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "sigma" && n.namespace_ ().empty ())
    {
      this->sigma_.set (sigma_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "epsilon" && n.namespace_ ().empty ())
    {
      this->epsilon_.set (epsilon_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "mass" && n.namespace_ ().empty ())
    {
      this->mass_.set (mass_traits::create (i, f, this));
      continue;
    }
  }

  if (!sigma_.present ())
  {
    this->sigma_.set (sigma_default_value ());
  }

  if (!epsilon_.present ())
  {
    this->epsilon_.set (epsilon_default_value ());
  }

  if (!mass_.present ())
  {
    this->mass_.set (mass_default_value ());
  }
}

type_t* type_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class type_t (*this, f, c);
}

type_t::
~type_t ()
{
}

// vec3i_t
//

vec3i_t::
vec3i_t ()
: ::xml_schema::type (),
  X_ (X_default_value (), ::xml_schema::flags (), this),
  Y_ (Y_default_value (), ::xml_schema::flags (), this),
  Z_ (Z_default_value (), ::xml_schema::flags (), this)
{
}

vec3i_t::
vec3i_t (const vec3i_t& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  X_ (x.X_, f, this),
  Y_ (x.Y_, f, this),
  Z_ (x.Z_, f, this)
{
}

vec3i_t::
vec3i_t (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  X_ (f, this),
  Y_ (f, this),
  Z_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
    this->parse (p, f);
  }
}

void vec3i_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "X" && n.namespace_ ().empty ())
    {
      this->X_.set (X_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "Y" && n.namespace_ ().empty ())
    {
      this->Y_.set (Y_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "Z" && n.namespace_ ().empty ())
    {
      this->Z_.set (Z_traits::create (i, f, this));
      continue;
    }
  }

  if (!X_.present ())
  {
    this->X_.set (X_default_value ());
  }

  if (!Y_.present ())
  {
    this->Y_.set (Y_default_value ());
  }

  if (!Z_.present ())
  {
    this->Z_.set (Z_default_value ());
  }
}

vec3i_t* vec3i_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class vec3i_t (*this, f, c);
}

vec3i_t::
~vec3i_t ()
{
}

// vec3d_t
//

vec3d_t::
vec3d_t ()
: ::xml_schema::type (),
  X_ (X_default_value (), ::xml_schema::flags (), this),
  Y_ (Y_default_value (), ::xml_schema::flags (), this),
  Z_ (Z_default_value (), ::xml_schema::flags (), this)
{
}

vec3d_t::
vec3d_t (const vec3d_t& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  X_ (x.X_, f, this),
  Y_ (x.Y_, f, this),
  Z_ (x.Z_, f, this)
{
}

vec3d_t::
vec3d_t (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  X_ (f, this),
  Y_ (f, this),
  Z_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
    this->parse (p, f);
  }
}

void vec3d_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "X" && n.namespace_ ().empty ())
    {
      this->X_.set (X_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "Y" && n.namespace_ ().empty ())
    {
      this->Y_.set (Y_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "Z" && n.namespace_ ().empty ())
    {
      this->Z_.set (Z_traits::create (i, f, this));
      continue;
    }
  }

  if (!X_.present ())
  {
    this->X_.set (X_default_value ());
  }

  if (!Y_.present ())
  {
    this->Y_.set (Y_default_value ());
  }

  if (!Z_.present ())
  {
    this->Z_.set (Z_default_value ());
  }
}

vec3d_t* vec3d_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class vec3d_t (*this, f, c);
}

vec3d_t::
~vec3d_t ()
{
}

// vec3b_t
//

vec3b_t::
vec3b_t ()
: ::xml_schema::type (),
  X_ (X_default_value (), ::xml_schema::flags (), this),
  Y_ (Y_default_value (), ::xml_schema::flags (), this),
  Z_ (Z_default_value (), ::xml_schema::flags (), this)
{
}

vec3b_t::
vec3b_t (const vec3b_t& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  X_ (x.X_, f, this),
  Y_ (x.Y_, f, this),
  Z_ (x.Z_, f, this)
{
}

vec3b_t::
vec3b_t (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  X_ (f, this),
  Y_ (f, this),
  Z_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
    this->parse (p, f);
  }
}

void vec3b_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "X" && n.namespace_ ().empty ())
    {
      this->X_.set (X_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "Y" && n.namespace_ ().empty ())
    {
      this->Y_.set (Y_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "Z" && n.namespace_ ().empty ())
    {
      this->Z_.set (Z_traits::create (i, f, this));
      continue;
    }
  }

  if (!X_.present ())
  {
    this->X_.set (X_default_value ());
  }

  if (!Y_.present ())
  {
    this->Y_.set (Y_default_value ());
  }

  if (!Z_.present ())
  {
    this->Z_.set (Z_default_value ());
  }
}

vec3b_t* vec3b_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class vec3b_t (*this, f, c);
}

vec3b_t::
~vec3b_t ()
{
}

// cuboid_t
//

cuboid_t::
cuboid_t (const position_type& position,
          const initialVelocity_type& initialVelocity,
          const particleCount_type& particleCount,
          const spacing_type& spacing)
: ::xml_schema::type (),
  position_ (position, ::xml_schema::flags (), this),
  initialVelocity_ (initialVelocity, ::xml_schema::flags (), this),
  particleCount_ (particleCount, ::xml_schema::flags (), this),
  spacing_ (spacing, ::xml_schema::flags (), this),
  type_ (type_default_value (), ::xml_schema::flags (), this)
{
}

cuboid_t::
cuboid_t (::std::auto_ptr< position_type >& position,
          ::std::auto_ptr< initialVelocity_type >& initialVelocity,
          ::std::auto_ptr< particleCount_type >& particleCount,
          const spacing_type& spacing)
: ::xml_schema::type (),
  position_ (position, ::xml_schema::flags (), this),
  initialVelocity_ (initialVelocity, ::xml_schema::flags (), this),
  particleCount_ (particleCount, ::xml_schema::flags (), this),
  spacing_ (spacing, ::xml_schema::flags (), this),
  type_ (type_default_value (), ::xml_schema::flags (), this)
{
}

cuboid_t::
cuboid_t (const cuboid_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  position_ (x.position_, f, this),
  initialVelocity_ (x.initialVelocity_, f, this),
  particleCount_ (x.particleCount_, f, this),
  spacing_ (x.spacing_, f, this),
  type_ (x.type_, f, this)
{
}

cuboid_t::
cuboid_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  position_ (f, this),
  initialVelocity_ (f, this),
  particleCount_ (f, this),
  spacing_ (f, this),
  type_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void cuboid_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // position
    //
    if (n.name () == "position" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< position_type > r (
        position_traits::create (i, f, this));

      if (!position_.present ())
      {
        this->position_.set (r);
        continue;
      }
    }

    // initialVelocity
    //
    if (n.name () == "initialVelocity" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< initialVelocity_type > r (
        initialVelocity_traits::create (i, f, this));

      if (!initialVelocity_.present ())
      {
        this->initialVelocity_.set (r);
        continue;
      }
    }

    // particleCount
    //
    if (n.name () == "particleCount" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< particleCount_type > r (
        particleCount_traits::create (i, f, this));

      if (!particleCount_.present ())
      {
        this->particleCount_.set (r);
        continue;
      }
    }

    // spacing
    //
    if (n.name () == "spacing" && n.namespace_ ().empty ())
    {
      if (!spacing_.present ())
      {
        this->spacing_.set (spacing_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!position_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "position",
      "");
  }

  if (!initialVelocity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "initialVelocity",
      "");
  }

  if (!particleCount_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "particleCount",
      "");
  }

  if (!spacing_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "spacing",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      this->type_.set (type_traits::create (i, f, this));
      continue;
    }
  }

  if (!type_.present ())
  {
    this->type_.set (type_default_value ());
  }
}

cuboid_t* cuboid_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class cuboid_t (*this, f, c);
}

cuboid_t::
~cuboid_t ()
{
}

// sphere_t
//

sphere_t::
sphere_t (const type_type& type,
          const position_type& position,
          const initialVelocity_type& initialVelocity,
          const radius_type& radius,
          const spacing_type& spacing)
: ::xml_schema::type (),
  type_ (type, ::xml_schema::flags (), this),
  position_ (position, ::xml_schema::flags (), this),
  initialVelocity_ (initialVelocity, ::xml_schema::flags (), this),
  radius_ (radius, ::xml_schema::flags (), this),
  spacing_ (spacing, ::xml_schema::flags (), this)
{
}

sphere_t::
sphere_t (const type_type& type,
          ::std::auto_ptr< position_type >& position,
          ::std::auto_ptr< initialVelocity_type >& initialVelocity,
          const radius_type& radius,
          const spacing_type& spacing)
: ::xml_schema::type (),
  type_ (type, ::xml_schema::flags (), this),
  position_ (position, ::xml_schema::flags (), this),
  initialVelocity_ (initialVelocity, ::xml_schema::flags (), this),
  radius_ (radius, ::xml_schema::flags (), this),
  spacing_ (spacing, ::xml_schema::flags (), this)
{
}

sphere_t::
sphere_t (const sphere_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  type_ (x.type_, f, this),
  position_ (x.position_, f, this),
  initialVelocity_ (x.initialVelocity_, f, this),
  radius_ (x.radius_, f, this),
  spacing_ (x.spacing_, f, this)
{
}

sphere_t::
sphere_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  type_ (f, this),
  position_ (f, this),
  initialVelocity_ (f, this),
  radius_ (f, this),
  spacing_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void sphere_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // type
    //
    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      if (!type_.present ())
      {
        this->type_.set (type_traits::create (i, f, this));
        continue;
      }
    }

    // position
    //
    if (n.name () == "position" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< position_type > r (
        position_traits::create (i, f, this));

      if (!position_.present ())
      {
        this->position_.set (r);
        continue;
      }
    }

    // initialVelocity
    //
    if (n.name () == "initialVelocity" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< initialVelocity_type > r (
        initialVelocity_traits::create (i, f, this));

      if (!initialVelocity_.present ())
      {
        this->initialVelocity_.set (r);
        continue;
      }
    }

    // radius
    //
    if (n.name () == "radius" && n.namespace_ ().empty ())
    {
      if (!radius_.present ())
      {
        this->radius_.set (radius_traits::create (i, f, this));
        continue;
      }
    }

    // spacing
    //
    if (n.name () == "spacing" && n.namespace_ ().empty ())
    {
      if (!spacing_.present ())
      {
        this->spacing_.set (spacing_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "type",
      "");
  }

  if (!position_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "position",
      "");
  }

  if (!initialVelocity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "initialVelocity",
      "");
  }

  if (!radius_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "radius",
      "");
  }

  if (!spacing_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "spacing",
      "");
  }
}

sphere_t* sphere_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class sphere_t (*this, f, c);
}

sphere_t::
~sphere_t ()
{
}

// particle_t
//

particle_t::
particle_t (const position_type& position,
            const velocity_type& velocity)
: ::xml_schema::type (),
  position_ (position, ::xml_schema::flags (), this),
  velocity_ (velocity, ::xml_schema::flags (), this),
  type_ (::xml_schema::flags (), this)
{
}

particle_t::
particle_t (::std::auto_ptr< position_type >& position,
            ::std::auto_ptr< velocity_type >& velocity)
: ::xml_schema::type (),
  position_ (position, ::xml_schema::flags (), this),
  velocity_ (velocity, ::xml_schema::flags (), this),
  type_ (::xml_schema::flags (), this)
{
}

particle_t::
particle_t (const particle_t& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  position_ (x.position_, f, this),
  velocity_ (x.velocity_, f, this),
  type_ (x.type_, f, this)
{
}

particle_t::
particle_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  position_ (f, this),
  velocity_ (f, this),
  type_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void particle_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // position
    //
    if (n.name () == "position" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< position_type > r (
        position_traits::create (i, f, this));

      if (!position_.present ())
      {
        this->position_.set (r);
        continue;
      }
    }

    // velocity
    //
    if (n.name () == "velocity" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< velocity_type > r (
        velocity_traits::create (i, f, this));

      if (!velocity_.present ())
      {
        this->velocity_.set (r);
        continue;
      }
    }

    break;
  }

  if (!position_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "position",
      "");
  }

  if (!velocity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "velocity",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      this->type_.set (type_traits::create (i, f, this));
      continue;
    }
  }
}

particle_t* particle_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class particle_t (*this, f, c);
}

particle_t::
~particle_t ()
{
}

// particleArray_t
//

particleArray_t::
particleArray_t ()
: ::xml_schema::type (),
  particle_ (::xml_schema::flags (), this)
{
}

particleArray_t::
particleArray_t (const particleArray_t& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  particle_ (x.particle_, f, this)
{
}

particleArray_t::
particleArray_t (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  particle_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void particleArray_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // particle
    //
    if (n.name () == "particle" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< particle_type > r (
        particle_traits::create (i, f, this));

      this->particle_.push_back (r);
      continue;
    }

    break;
  }
}

particleArray_t* particleArray_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class particleArray_t (*this, f, c);
}

particleArray_t::
~particleArray_t ()
{
}

// thermostat_t
//

thermostat_t::
thermostat_t (const numDimensions_type& numDimensions,
              const initialTemp_type& initialTemp,
              const targetTemp_type& targetTemp,
              const step_type& step,
              const startTime_type& startTime,
              const targetTime_type& targetTime)
: ::xml_schema::type (),
  numDimensions_ (numDimensions, ::xml_schema::flags (), this),
  mask_ (::xml_schema::flags (), this),
  initialTemp_ (initialTemp, ::xml_schema::flags (), this),
  targetTemp_ (targetTemp, ::xml_schema::flags (), this),
  step_ (step, ::xml_schema::flags (), this),
  startTime_ (startTime, ::xml_schema::flags (), this),
  targetTime_ (targetTime, ::xml_schema::flags (), this)
{
}

thermostat_t::
thermostat_t (const thermostat_t& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  numDimensions_ (x.numDimensions_, f, this),
  mask_ (x.mask_, f, this),
  initialTemp_ (x.initialTemp_, f, this),
  targetTemp_ (x.targetTemp_, f, this),
  step_ (x.step_, f, this),
  startTime_ (x.startTime_, f, this),
  targetTime_ (x.targetTime_, f, this)
{
}

thermostat_t::
thermostat_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  numDimensions_ (f, this),
  mask_ (f, this),
  initialTemp_ (f, this),
  targetTemp_ (f, this),
  step_ (f, this),
  startTime_ (f, this),
  targetTime_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void thermostat_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // numDimensions
    //
    if (n.name () == "numDimensions" && n.namespace_ ().empty ())
    {
      if (!numDimensions_.present ())
      {
        this->numDimensions_.set (numDimensions_traits::create (i, f, this));
        continue;
      }
    }

    // mask
    //
    if (n.name () == "mask" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< mask_type > r (
        mask_traits::create (i, f, this));

      if (!this->mask_)
      {
        this->mask_.set (r);
        continue;
      }
    }

    // initialTemp
    //
    if (n.name () == "initialTemp" && n.namespace_ ().empty ())
    {
      if (!initialTemp_.present ())
      {
        this->initialTemp_.set (initialTemp_traits::create (i, f, this));
        continue;
      }
    }

    // targetTemp
    //
    if (n.name () == "targetTemp" && n.namespace_ ().empty ())
    {
      if (!targetTemp_.present ())
      {
        this->targetTemp_.set (targetTemp_traits::create (i, f, this));
        continue;
      }
    }

    // step
    //
    if (n.name () == "step" && n.namespace_ ().empty ())
    {
      if (!step_.present ())
      {
        this->step_.set (step_traits::create (i, f, this));
        continue;
      }
    }

    // startTime
    //
    if (n.name () == "startTime" && n.namespace_ ().empty ())
    {
      if (!startTime_.present ())
      {
        this->startTime_.set (startTime_traits::create (i, f, this));
        continue;
      }
    }

    // targetTime
    //
    if (n.name () == "targetTime" && n.namespace_ ().empty ())
    {
      if (!targetTime_.present ())
      {
        this->targetTime_.set (targetTime_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!numDimensions_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "numDimensions",
      "");
  }

  if (!initialTemp_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "initialTemp",
      "");
  }

  if (!targetTemp_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "targetTemp",
      "");
  }

  if (!step_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "step",
      "");
  }

  if (!startTime_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "startTime",
      "");
  }

  if (!targetTime_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "targetTime",
      "");
  }
}

thermostat_t* thermostat_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class thermostat_t (*this, f, c);
}

thermostat_t::
~thermostat_t ()
{
}

// membrane_t
//

membrane_t::
membrane_t (const r0_type& r0,
            const k_type& k,
            const ljTruncation_type& ljTruncation,
            const pickIndex_type& pickIndex,
            const pickSize_type& pickSize,
            const pickForce_type& pickForce,
            const pickDuration_type& pickDuration)
: ::xml_schema::type (),
  r0_ (r0, ::xml_schema::flags (), this),
  k_ (k, ::xml_schema::flags (), this),
  ljTruncation_ (ljTruncation, ::xml_schema::flags (), this),
  pickIndex_ (pickIndex, ::xml_schema::flags (), this),
  pickSize_ (pickSize, ::xml_schema::flags (), this),
  pickForce_ (pickForce, ::xml_schema::flags (), this),
  pickDuration_ (pickDuration, ::xml_schema::flags (), this)
{
}

membrane_t::
membrane_t (const r0_type& r0,
            const k_type& k,
            const ljTruncation_type& ljTruncation,
            ::std::auto_ptr< pickIndex_type >& pickIndex,
            ::std::auto_ptr< pickSize_type >& pickSize,
            ::std::auto_ptr< pickForce_type >& pickForce,
            const pickDuration_type& pickDuration)
: ::xml_schema::type (),
  r0_ (r0, ::xml_schema::flags (), this),
  k_ (k, ::xml_schema::flags (), this),
  ljTruncation_ (ljTruncation, ::xml_schema::flags (), this),
  pickIndex_ (pickIndex, ::xml_schema::flags (), this),
  pickSize_ (pickSize, ::xml_schema::flags (), this),
  pickForce_ (pickForce, ::xml_schema::flags (), this),
  pickDuration_ (pickDuration, ::xml_schema::flags (), this)
{
}

membrane_t::
membrane_t (const membrane_t& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  r0_ (x.r0_, f, this),
  k_ (x.k_, f, this),
  ljTruncation_ (x.ljTruncation_, f, this),
  pickIndex_ (x.pickIndex_, f, this),
  pickSize_ (x.pickSize_, f, this),
  pickForce_ (x.pickForce_, f, this),
  pickDuration_ (x.pickDuration_, f, this)
{
}

membrane_t::
membrane_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  r0_ (f, this),
  k_ (f, this),
  ljTruncation_ (f, this),
  pickIndex_ (f, this),
  pickSize_ (f, this),
  pickForce_ (f, this),
  pickDuration_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void membrane_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // r0
    //
    if (n.name () == "r0" && n.namespace_ ().empty ())
    {
      if (!r0_.present ())
      {
        this->r0_.set (r0_traits::create (i, f, this));
        continue;
      }
    }

    // k
    //
    if (n.name () == "k" && n.namespace_ ().empty ())
    {
      if (!k_.present ())
      {
        this->k_.set (k_traits::create (i, f, this));
        continue;
      }
    }

    // ljTruncation
    //
    if (n.name () == "ljTruncation" && n.namespace_ ().empty ())
    {
      if (!ljTruncation_.present ())
      {
        this->ljTruncation_.set (ljTruncation_traits::create (i, f, this));
        continue;
      }
    }

    // pickIndex
    //
    if (n.name () == "pickIndex" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< pickIndex_type > r (
        pickIndex_traits::create (i, f, this));

      if (!pickIndex_.present ())
      {
        this->pickIndex_.set (r);
        continue;
      }
    }

    // pickSize
    //
    if (n.name () == "pickSize" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< pickSize_type > r (
        pickSize_traits::create (i, f, this));

      if (!pickSize_.present ())
      {
        this->pickSize_.set (r);
        continue;
      }
    }

    // pickForce
    //
    if (n.name () == "pickForce" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< pickForce_type > r (
        pickForce_traits::create (i, f, this));

      if (!pickForce_.present ())
      {
        this->pickForce_.set (r);
        continue;
      }
    }

    // pickDuration
    //
    if (n.name () == "pickDuration" && n.namespace_ ().empty ())
    {
      if (!pickDuration_.present ())
      {
        this->pickDuration_.set (pickDuration_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!r0_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "r0",
      "");
  }

  if (!k_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "k",
      "");
  }

  if (!ljTruncation_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "ljTruncation",
      "");
  }

  if (!pickIndex_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "pickIndex",
      "");
  }

  if (!pickSize_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "pickSize",
      "");
  }

  if (!pickForce_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "pickForce",
      "");
  }

  if (!pickDuration_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "pickDuration",
      "");
  }
}

membrane_t* membrane_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class membrane_t (*this, f, c);
}

membrane_t::
~membrane_t ()
{
}

// simulation_t
//

simulation_t::
simulation_t (const thermostat_type& thermostat,
              const gravity_type& gravity,
              const domain_type& domain,
              const boundaries_type& boundaries,
              const wallType_type& wallType,
              const rCutOff_type& rCutOff)
: ::xml_schema::type (),
  thermostat_ (thermostat, ::xml_schema::flags (), this),
  gravity_ (gravity, ::xml_schema::flags (), this),
  domain_ (domain, ::xml_schema::flags (), this),
  boundaries_ (boundaries, ::xml_schema::flags (), this),
  wallType_ (wallType, ::xml_schema::flags (), this),
  rCutOff_ (rCutOff, ::xml_schema::flags (), this),
  smoothedLJRadius_ (::xml_schema::flags (), this),
  membrane_ (::xml_schema::flags (), this),
  type_ (::xml_schema::flags (), this),
  cuboid_ (::xml_schema::flags (), this),
  sphere_ (::xml_schema::flags (), this),
  particles_ (::xml_schema::flags (), this)
{
}

simulation_t::
simulation_t (::std::auto_ptr< thermostat_type >& thermostat,
              ::std::auto_ptr< gravity_type >& gravity,
              ::std::auto_ptr< domain_type >& domain,
              ::std::auto_ptr< boundaries_type >& boundaries,
              const wallType_type& wallType,
              const rCutOff_type& rCutOff)
: ::xml_schema::type (),
  thermostat_ (thermostat, ::xml_schema::flags (), this),
  gravity_ (gravity, ::xml_schema::flags (), this),
  domain_ (domain, ::xml_schema::flags (), this),
  boundaries_ (boundaries, ::xml_schema::flags (), this),
  wallType_ (wallType, ::xml_schema::flags (), this),
  rCutOff_ (rCutOff, ::xml_schema::flags (), this),
  smoothedLJRadius_ (::xml_schema::flags (), this),
  membrane_ (::xml_schema::flags (), this),
  type_ (::xml_schema::flags (), this),
  cuboid_ (::xml_schema::flags (), this),
  sphere_ (::xml_schema::flags (), this),
  particles_ (::xml_schema::flags (), this)
{
}

simulation_t::
simulation_t (const simulation_t& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  thermostat_ (x.thermostat_, f, this),
  gravity_ (x.gravity_, f, this),
  domain_ (x.domain_, f, this),
  boundaries_ (x.boundaries_, f, this),
  wallType_ (x.wallType_, f, this),
  rCutOff_ (x.rCutOff_, f, this),
  smoothedLJRadius_ (x.smoothedLJRadius_, f, this),
  membrane_ (x.membrane_, f, this),
  type_ (x.type_, f, this),
  cuboid_ (x.cuboid_, f, this),
  sphere_ (x.sphere_, f, this),
  particles_ (x.particles_, f, this)
{
}

simulation_t::
simulation_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  thermostat_ (f, this),
  gravity_ (f, this),
  domain_ (f, this),
  boundaries_ (f, this),
  wallType_ (f, this),
  rCutOff_ (f, this),
  smoothedLJRadius_ (f, this),
  membrane_ (f, this),
  type_ (f, this),
  cuboid_ (f, this),
  sphere_ (f, this),
  particles_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void simulation_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // thermostat
    //
    if (n.name () == "thermostat" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< thermostat_type > r (
        thermostat_traits::create (i, f, this));

      if (!thermostat_.present ())
      {
        this->thermostat_.set (r);
        continue;
      }
    }

    // gravity
    //
    if (n.name () == "gravity" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< gravity_type > r (
        gravity_traits::create (i, f, this));

      if (!gravity_.present ())
      {
        this->gravity_.set (r);
        continue;
      }
    }

    // domain
    //
    if (n.name () == "domain" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< domain_type > r (
        domain_traits::create (i, f, this));

      if (!domain_.present ())
      {
        this->domain_.set (r);
        continue;
      }
    }

    // boundaries
    //
    if (n.name () == "boundaries" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< boundaries_type > r (
        boundaries_traits::create (i, f, this));

      if (!boundaries_.present ())
      {
        this->boundaries_.set (r);
        continue;
      }
    }

    // wallType
    //
    if (n.name () == "wallType" && n.namespace_ ().empty ())
    {
      if (!wallType_.present ())
      {
        this->wallType_.set (wallType_traits::create (i, f, this));
        continue;
      }
    }

    // rCutOff
    //
    if (n.name () == "rCutOff" && n.namespace_ ().empty ())
    {
      if (!rCutOff_.present ())
      {
        this->rCutOff_.set (rCutOff_traits::create (i, f, this));
        continue;
      }
    }

    // smoothedLJRadius
    //
    if (n.name () == "smoothedLJRadius" && n.namespace_ ().empty ())
    {
      if (!this->smoothedLJRadius_)
      {
        this->smoothedLJRadius_.set (smoothedLJRadius_traits::create (i, f, this));
        continue;
      }
    }

    // membrane
    //
    if (n.name () == "membrane" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< membrane_type > r (
        membrane_traits::create (i, f, this));

      if (!this->membrane_)
      {
        this->membrane_.set (r);
        continue;
      }
    }

    // type
    //
    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< type_type > r (
        type_traits::create (i, f, this));

      this->type_.push_back (r);
      continue;
    }

    // cuboid
    //
    if (n.name () == "cuboid" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< cuboid_type > r (
        cuboid_traits::create (i, f, this));

      this->cuboid_.push_back (r);
      continue;
    }

    // sphere
    //
    if (n.name () == "sphere" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< sphere_type > r (
        sphere_traits::create (i, f, this));

      this->sphere_.push_back (r);
      continue;
    }

    // particles
    //
    if (n.name () == "particles" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< particles_type > r (
        particles_traits::create (i, f, this));

      if (!this->particles_)
      {
        this->particles_.set (r);
        continue;
      }
    }

    break;
  }

  if (!thermostat_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "thermostat",
      "");
  }

  if (!gravity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "gravity",
      "");
  }

  if (!domain_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "domain",
      "");
  }

  if (!boundaries_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "boundaries",
      "");
  }

  if (!wallType_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "wallType",
      "");
  }

  if (!rCutOff_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "rCutOff",
      "");
  }
}

simulation_t* simulation_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class simulation_t (*this, f, c);
}

simulation_t::
~simulation_t ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::simulation_t >
simulation (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::simulation_t > r (
    ::simulation (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::simulation_t >
simulation (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::simulation_t > r (
    ::simulation (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::simulation_t >
simulation (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::simulation_t > r (
    ::simulation (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::simulation_t >
simulation (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulation (isrc, f, p);
}

::std::auto_ptr< ::simulation_t >
simulation (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulation (isrc, h, f, p);
}

::std::auto_ptr< ::simulation_t >
simulation (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulation (isrc, h, f, p);
}

::std::auto_ptr< ::simulation_t >
simulation (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulation (isrc, f, p);
}

::std::auto_ptr< ::simulation_t >
simulation (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulation (isrc, h, f, p);
}

::std::auto_ptr< ::simulation_t >
simulation (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulation (isrc, h, f, p);
}

::std::auto_ptr< ::simulation_t >
simulation (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::simulation_t > r (
    ::simulation (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::simulation_t >
simulation (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::simulation_t > r (
    ::simulation (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::simulation_t >
simulation (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::simulation_t > r (
    ::simulation (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::simulation_t >
simulation (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::simulation_t > r (
      ::simulation (
        c, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "simulation" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::simulation_t > r (
      ::xsd::cxx::tree::traits< ::simulation_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "simulation",
    "");
}

::std::auto_ptr< ::simulation_t >
simulation (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "simulation" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::simulation_t > r (
      ::xsd::cxx::tree::traits< ::simulation_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "simulation",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const type_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // sigma
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "sigma",
        e));

    a << ::xml_schema::as_double(i.sigma ());
  }

  // epsilon
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "epsilon",
        e));

    a << ::xml_schema::as_double(i.epsilon ());
  }

  // mass
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "mass",
        e));

    a << ::xml_schema::as_double(i.mass ());
  }
}

void
operator<< (::xercesc::DOMElement& e, const vec3i_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // X
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "X",
        e));

    a << i.X ();
  }

  // Y
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "Y",
        e));

    a << i.Y ();
  }

  // Z
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "Z",
        e));

    a << i.Z ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const vec3d_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // X
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "X",
        e));

    a << ::xml_schema::as_double(i.X ());
  }

  // Y
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "Y",
        e));

    a << ::xml_schema::as_double(i.Y ());
  }

  // Z
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "Z",
        e));

    a << ::xml_schema::as_double(i.Z ());
  }
}

void
operator<< (::xercesc::DOMElement& e, const vec3b_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // X
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "X",
        e));

    a << i.X ();
  }

  // Y
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "Y",
        e));

    a << i.Y ();
  }

  // Z
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "Z",
        e));

    a << i.Z ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const cuboid_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // position
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "position",
        e));

    s << i.position ();
  }

  // initialVelocity
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "initialVelocity",
        e));

    s << i.initialVelocity ();
  }

  // particleCount
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "particleCount",
        e));

    s << i.particleCount ();
  }

  // spacing
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "spacing",
        e));

    s << ::xml_schema::as_double(i.spacing ());
  }

  // type
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "type",
        e));

    a << i.type ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const sphere_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // type
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "type",
        e));

    s << i.type ();
  }

  // position
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "position",
        e));

    s << i.position ();
  }

  // initialVelocity
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "initialVelocity",
        e));

    s << i.initialVelocity ();
  }

  // radius
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "radius",
        e));

    s << i.radius ();
  }

  // spacing
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "spacing",
        e));

    s << ::xml_schema::as_double(i.spacing ());
  }
}

void
operator<< (::xercesc::DOMElement& e, const particle_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // position
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "position",
        e));

    s << i.position ();
  }

  // velocity
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "velocity",
        e));

    s << i.velocity ();
  }

  // type
  //
  if (i.type ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "type",
        e));

    a << *i.type ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const particleArray_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // particle
  //
  for (particleArray_t::particle_const_iterator
       b (i.particle ().begin ()), n (i.particle ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "particle",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const thermostat_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // numDimensions
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "numDimensions",
        e));

    s << i.numDimensions ();
  }

  // mask
  //
  if (i.mask ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "mask",
        e));

    s << *i.mask ();
  }

  // initialTemp
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "initialTemp",
        e));

    s << ::xml_schema::as_double(i.initialTemp ());
  }

  // targetTemp
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "targetTemp",
        e));

    s << ::xml_schema::as_double(i.targetTemp ());
  }

  // step
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "step",
        e));

    s << i.step ();
  }

  // startTime
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "startTime",
        e));

    s << i.startTime ();
  }

  // targetTime
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "targetTime",
        e));

    s << i.targetTime ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const membrane_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // r0
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "r0",
        e));

    s << ::xml_schema::as_double(i.r0 ());
  }

  // k
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "k",
        e));

    s << ::xml_schema::as_double(i.k ());
  }

  // ljTruncation
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "ljTruncation",
        e));

    s << ::xml_schema::as_double(i.ljTruncation ());
  }

  // pickIndex
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "pickIndex",
        e));

    s << i.pickIndex ();
  }

  // pickSize
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "pickSize",
        e));

    s << i.pickSize ();
  }

  // pickForce
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "pickForce",
        e));

    s << i.pickForce ();
  }

  // pickDuration
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "pickDuration",
        e));

    s << ::xml_schema::as_double(i.pickDuration ());
  }
}

void
operator<< (::xercesc::DOMElement& e, const simulation_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // thermostat
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "thermostat",
        e));

    s << i.thermostat ();
  }

  // gravity
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "gravity",
        e));

    s << i.gravity ();
  }

  // domain
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "domain",
        e));

    s << i.domain ();
  }

  // boundaries
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "boundaries",
        e));

    s << i.boundaries ();
  }

  // wallType
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "wallType",
        e));

    s << i.wallType ();
  }

  // rCutOff
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "rCutOff",
        e));

    s << ::xml_schema::as_double(i.rCutOff ());
  }

  // smoothedLJRadius
  //
  if (i.smoothedLJRadius ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "smoothedLJRadius",
        e));

    s << ::xml_schema::as_double(*i.smoothedLJRadius ());
  }

  // membrane
  //
  if (i.membrane ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "membrane",
        e));

    s << *i.membrane ();
  }

  // type
  //
  for (simulation_t::type_const_iterator
       b (i.type ().begin ()), n (i.type ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "type",
        e));

    s << *b;
  }

  // cuboid
  //
  for (simulation_t::cuboid_const_iterator
       b (i.cuboid ().begin ()), n (i.cuboid ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "cuboid",
        e));

    s << *b;
  }

  // sphere
  //
  for (simulation_t::sphere_const_iterator
       b (i.sphere ().begin ()), n (i.sphere ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "sphere",
        e));

    s << *b;
  }

  // particles
  //
  if (i.particles ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "particles",
        e));

    s << *i.particles ();
  }
}

void
simulation (::std::ostream& o,
            const ::simulation_t& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::simulation (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
simulation (::std::ostream& o,
            const ::simulation_t& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::simulation (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
simulation (::std::ostream& o,
            const ::simulation_t& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::simulation (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
simulation (::xercesc::XMLFormatTarget& t,
            const ::simulation_t& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::simulation (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
simulation (::xercesc::XMLFormatTarget& t,
            const ::simulation_t& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::simulation (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
simulation (::xercesc::XMLFormatTarget& t,
            const ::simulation_t& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::simulation (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
simulation (::xercesc::DOMDocument& d,
            const ::simulation_t& s,
            ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "simulation" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "simulation",
      "");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
simulation (const ::simulation_t& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "simulation",
      "",
      m, f));

  ::simulation (*d, s, f);
  return d;
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

